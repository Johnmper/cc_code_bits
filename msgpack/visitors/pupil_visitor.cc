#include"pupil_visitor.hh"

#include<iostream>
#include<fstream>
#include<sstream>
#include<string>

#include<msgpack.hpp>


#ifdef PUPIL_VISITOR_DEBUG
    #define macro_found_item(a)  std::cout << "\e[32;1mFound\e[0m [\e[34;1m" << a <<  "\e[0m]" << std::endl;
    #define macro_pupil_value(a)  std::cout << "  \e[35;1m" << a << "\e[0m" << std::endl;
    #ifdef FUNCTION_ENTRY_DEBUG
        #define macro_pupil_visitor_func std::cout << "PupilVisitor::" << __func__ << std::endl;
    #else
        #define macro_pupil_visitor_func
    #endif
#else
    #define macro_found_item(a)
    #define macro_pupil_value(a)
    #define macro_pupil_visitor_func
#endif

// Macro to simplify the array value update
#define macro_array_idx(a) \
    switch(array_idx){  case 0:pupil_msg.a.x=v;break;\
                        case 1:pupil_msg.a.y=v;break;\
                        case 2:pupil_msg.a.z=v;break;}

//===========================================================================================================
//     ########  ##     ## ########  #### ##
//     ##     ## ##     ## ##     ##  ##  ##
//     ##     ## ##     ## ##     ##  ##  ##
//     ########  ##     ## ########   ##  ##
//     ##        ##     ## ##         ##  ##
//     ##        ##     ## ##         ##  ##
//     ##         #######  ##        #### ########
//        ##     ## ####  ######  #### ########  #######  ########
//        ##     ##  ##  ##    ##  ##     ##    ##     ## ##     ##
//        ##     ##  ##  ##        ##     ##    ##     ## ##     ##
//        ##     ##  ##   ######   ##     ##    ##     ## ########
//         ##   ##   ##        ##  ##     ##    ##     ## ##   ##
//          ## ##    ##  ##    ##  ##     ##    ##     ## ##    ##
//           ###    ####  ######  ####    ##     #######  ##     ##
//===========================================================================================================
PupilVisitor::PupilVisitor(){
    map_key = false;
    array_value = false;
    array_idx = 0;
    hashed_keys.reserve(4);
}



//===========================================================================================================
//   ######  ######## ########  #### ##    ##  ######    #######  #### ##    ## ########
//  ##    ##    ##    ##     ##  ##  ###   ## ##    ##  ##     ##  ##  ###   ##    ##
//  ##          ##    ##     ##  ##  ####  ## ##               ##  ##  ####  ##    ##
//   ######     ##    ########   ##  ## ## ## ##   ####  #######   ##  ## ## ##    ##
//        ##    ##    ##   ##    ##  ##  #### ##    ##  ##         ##  ##  ####    ##
//  ##    ##    ##    ##    ##   ##  ##   ### ##    ##  ##         ##  ##   ###    ##
//   ######     ##    ##     ## #### ##    ##  ######   ######### #### ##    ##    ##
//===========================================================================================================
// The string2int() function results in the following correspondence:
//  NOTE: (accumulated map key strings! value)
//                     diameter  >>  843
//                   confidence  >>  1038
//                     model_id  >>  829
//             model_confidence  >>  1662
//              pupil_timestamp  >>  1629
//        model_birth_timestamp  >>  2236
//                  diameter_3d  >>  1089
//                       method  >>  641
//                        topic  >>  543
//                          phi  >>  321
//                        theta  >>  534
//                           id  >>  205
//                     norm_pos  >>  877
//    projected_sphere +   axes  >>  2135
//    projected_sphere +  angle  >>  2221
//    projected_sphere + center  >>  2343
//              sphere + radius  >>  1295
//              sphere + center  >>  1288
//             ellipse +   axes  >>  1183
//             ellipse +  angle  >>  1269
//             ellipse + center  >>  1391
//           circle_3d + radius  >>  1520
//           circle_3d + center  >>  1513
//           circle_3d + normal  >>  1521
unsigned int PupilVisitor::string2int(const char *str, size_t size){
    unsigned int res = 0;
    for(int ii = 0; ii < size; ++ii){
        res = res + str[ii];
    }
    return res;
}


//===========================================================================================================
//  ##    ## #### ##
//  ###   ##  ##  ##
//  ####  ##  ##  ##
//  ## ## ##  ##  ##
//  ##  ####  ##  ##
//  ##   ###  ##  ##
//  ##    ## #### ########
//===========================================================================================================
bool PupilVisitor::visit_nil(){
    macro_pupil_visitor_func;
    return true;
}

//===========================================================================================================
//  ########   #######   #######  ##       ########    ###    ##    ##
//  ##     ## ##     ## ##     ## ##       ##         ## ##   ###   ##
//  ##     ## ##     ## ##     ## ##       ##        ##   ##  ####  ##
//  ########  ##     ## ##     ## ##       ######   ##     ## ## ## ##
//  ##     ## ##     ## ##     ## ##       ##       ######### ##  ####
//  ##     ## ##     ## ##     ## ##       ##       ##     ## ##   ###
//  ########   #######   #######  ######## ######## ##     ## ##    ##
//===========================================================================================================
bool PupilVisitor::visit_boolean(bool v){
    macro_pupil_visitor_func;
    return true;
}


//===========================================================================================================
//         #### ##    ## ########
//    ##    ##  ###   ##    ##
//    ##    ##  ####  ##    ##
//  ######  ##  ## ## ##    ##
//    ##    ##  ##  ####    ##
//    ##    ##  ##   ###    ##
//         #### ##    ##    ##
//===========================================================================================================
bool PupilVisitor::visit_positive_integer(uint64_t v){
    macro_pupil_visitor_func;

    std::cout << "V: " << std::accumulate(hashed_keys.begin(), hashed_keys.end(), 0) << " >> ";
    macro_pupil_value(v);

    switch(std::accumulate(hashed_keys.begin(), hashed_keys.end(), 0)){
        case 829:   // model_id
            pupil_msg.model_id = v;
            break;
        case 205:   // id
            pupil_msg.id = v;
            break;
    }
    return true;
}

//===========================================================================================================
//          #### ##    ## ########
//           ##  ###   ##    ##
//           ##  ####  ##    ##
//  #######  ##  ## ## ##    ##
//           ##  ##  ####    ##
//           ##  ##   ###    ##
//          #### ##    ##    ##
//===========================================================================================================
bool PupilVisitor::visit_negative_integer(int64_t v){
    macro_pupil_visitor_func;
    macro_pupil_value(v);
    return true;
}

//===========================================================================================================
//  ######## ##        #######     ###    ########  #######   #######
//  ##       ##       ##     ##   ## ##      ##    ##     ## ##     ##
//  ##       ##       ##     ##  ##   ##     ##           ##        ##
//  ######   ##       ##     ## ##     ##    ##     #######   #######
//  ##       ##       ##     ## #########    ##           ## ##
//  ##       ##       ##     ## ##     ##    ##    ##     ## ##
//  ##       ########  #######  ##     ##    ##     #######  #########
//===========================================================================================================
bool PupilVisitor::visit_float32(float v){
    macro_pupil_visitor_func;
    macro_pupil_value(v);
    return true;
}

//===========================================================================================================
//  ######## ##        #######     ###    ########  #######  ##
//  ##       ##       ##     ##   ## ##      ##    ##     ## ##    ##
//  ##       ##       ##     ##  ##   ##     ##    ##        ##    ##
//  ######   ##       ##     ## ##     ##    ##    ########  ##    ##
//  ##       ##       ##     ## #########    ##    ##     ## #########
//  ##       ##       ##     ## ##     ##    ##    ##     ##       ##
//  ##       ########  #######  ##     ##    ##     #######        ##
//===========================================================================================================
bool PupilVisitor::visit_float64(double v){


    macro_pupil_visitor_func;

    macro_pupil_value(v);

    switch(std::accumulate(hashed_keys.begin(), hashed_keys.end(), 0)){
        // ARRAY of FLOAT64
        case 877:   // norm_pos
            macro_array_idx(norm_pos);
            break;
        case 2135:  // projected_sphere_axes
            macro_array_idx(projected_sphere_axes);
            break;
        case 2343:  // projected_sphere_center
            macro_array_idx(projected_sphere_center);
            break;
        case 1288:  // sphere_center
            macro_array_idx(sphere_center);
            break;
        case 1183:  // ellipse_axes
            macro_array_idx(ellipse_axes);
            break;
        case 1391:  // ellipse_center
            macro_array_idx(ellipse_center);
            break;
        case 1513:  // circle_3d_center
            macro_array_idx(circle_3d_center);
            break;
        case 1521:  // circle_3d_normal
            macro_array_idx(circle_3d_normal);
            break;

        // single FLOAT64
        case 843:   // diameter
            pupil_msg.diameter = v;
            break;
        case 1038:  // confidence
            pupil_msg.confidence = v;
            break;
        case 1662:  // model_confidence
            pupil_msg.model_confidence = v;
            break;
        case 1629:  // timestamp
            pupil_msg.timestamp = v;
            break;
        case 2236:  // model_birth_timestamp
            pupil_msg.model_birth_timestamp = v;
            break;
        case 1089:  // diameter_3d
            pupil_msg.diameter_3d = v;
            break;
        case 321:   // phi
            pupil_msg.phi = v;
            break;
        case 534:   // theta
            pupil_msg.theta = v;
            break;
        case 2221:  // projected_sphere_angle
            pupil_msg.projected_sphere_angle = v;
            break;
        case 1295:  // sphere_radius
            pupil_msg.sphere_radius = v;
            break;
        case 1269:  // ellipse_angle
            pupil_msg.ellipse_angle = v;
            break;
        case 1520:  // circle_3d_radius
            pupil_msg.circle_3d_radius = v;
            break;
    }

    return true;
}

//===========================================================================================================
//   ######  ######## ########  #### ##    ##  ######
//  ##    ##    ##    ##     ##  ##  ###   ## ##    ##
//  ##          ##    ##     ##  ##  ####  ## ##
//   ######     ##    ########   ##  ## ## ## ##   ####
//        ##    ##    ##   ##    ##  ##  #### ##    ##
//  ##    ##    ##    ##    ##   ##  ##   ### ##    ##
//   ######     ##    ##     ## #### ##    ##  ######
//===========================================================================================================
bool PupilVisitor::visit_str(const char* v, uint32_t size){
    macro_pupil_visitor_func;

    if(map_key){
        // FOUND STRING THAT IS A KEY!!!
        // NOTE: map_key is toggled in start_map_key() and end_map_key() functions
        macro_found_item(std::string(v,size));
        hashed_keys.push_back(string2int(v,size));
    }
    else{
        // FOUND STRING THAT IS A VALUE
        std::cout << "V: " << std::accumulate(hashed_keys.begin(), hashed_keys.end(), 0) << " >> ";
        macro_pupil_value(std::string(v,size));
        switch(std::accumulate(hashed_keys.begin(), hashed_keys.end(), 0)){
            case 641:   // method
                pupil_msg.method = std::string(v,size);
                break;
            case 543:   // topic
                pupil_msg.topic = std::string(v,size);
                break;
        }
    }
    return true;
}

//===========================================================================================================
//  ########  #### ##    ##
//  ##     ##  ##  ###   ##
//  ##     ##  ##  ####  ##
//  ########   ##  ## ## ##
//  ##     ##  ##  ##  ####
//  ##     ##  ##  ##   ###
//  ########  #### ##    ##
//===========================================================================================================
bool PupilVisitor::visit_bin(const char* v, uint32_t size){
    macro_pupil_visitor_func;
    return true;
}

//===========================================================================================================
//  ######## ##     ## ########
//  ##        ##   ##     ##
//  ##         ## ##      ##
//  ######      ###       ##
//  ##         ## ##      ##
//  ##        ##   ##     ##
//  ######## ##     ##    ##
//===========================================================================================================
bool PupilVisitor::visit_ext(const char* v, uint32_t size){
    macro_pupil_visitor_func;
    return true;
}

//===========================================================================================================
//   ######  ########    ###    ########  ########       ###    ########  ########     ###    ##    ##
//  ##    ##    ##      ## ##   ##     ##    ##         ## ##   ##     ## ##     ##   ## ##    ##  ##
//  ##          ##     ##   ##  ##     ##    ##        ##   ##  ##     ## ##     ##  ##   ##    ####
//   ######     ##    ##     ## ########     ##       ##     ## ########  ########  ##     ##    ##
//        ##    ##    ######### ##   ##      ##       ######### ##   ##   ##   ##   #########    ##
//  ##    ##    ##    ##     ## ##    ##     ##       ##     ## ##    ##  ##    ##  ##     ##    ##
//   ######     ##    ##     ## ##     ##    ##       ##     ## ##     ## ##     ## ##     ##    ##
//===========================================================================================================
bool PupilVisitor::start_array(uint32_t num_elements){
    macro_pupil_visitor_func;
    array_value = true;
    array_idx = 0;
    return true;
}

//===========================================================================================================
//   ######  ########    ###    ########  ########    #### ######## ######## ##     ##
//  ##    ##    ##      ## ##   ##     ##    ##        ##     ##    ##       ###   ###
//  ##          ##     ##   ##  ##     ##    ##        ##     ##    ##       #### ####
//   ######     ##    ##     ## ########     ##        ##     ##    ######   ## ### ##
//        ##    ##    ######### ##   ##      ##        ##     ##    ##       ##     ##
//  ##    ##    ##    ##     ## ##    ##     ##        ##     ##    ##       ##     ##
//   ######     ##    ##     ## ##     ##    ##       ####    ##    ######## ##     ##
//===========================================================================================================
bool PupilVisitor::start_array_item(){
    macro_pupil_visitor_func;
    return true;
}

//===========================================================================================================
//  ######## ##    ## ########     #### ######## ######## ##     ##
//  ##       ###   ## ##     ##     ##     ##    ##       ###   ###
//  ##       ####  ## ##     ##     ##     ##    ##       #### ####
//  ######   ## ## ## ##     ##     ##     ##    ######   ## ### ##
//  ##       ##  #### ##     ##     ##     ##    ##       ##     ##
//  ##       ##   ### ##     ##     ##     ##    ##       ##     ##
//  ######## ##    ## ########     ####    ##    ######## ##     ##
//===========================================================================================================
bool PupilVisitor::end_array_item(){
    macro_pupil_visitor_func;
    array_idx = array_idx + 1;
    return true;
}

//===========================================================================================================
//  ######## ##    ## ########        ###    ########  ########     ###    ##    ##
//  ##       ###   ## ##     ##      ## ##   ##     ## ##     ##   ## ##    ##  ##
//  ##       ####  ## ##     ##     ##   ##  ##     ## ##     ##  ##   ##    ####
//  ######   ## ## ## ##     ##    ##     ## ########  ########  ##     ##    ##
//  ##       ##  #### ##     ##    ######### ##   ##   ##   ##   #########    ##
//  ##       ##   ### ##     ##    ##     ## ##    ##  ##    ##  ##     ##    ##
//  ######## ##    ## ########     ##     ## ##     ## ##     ## ##     ##    ##
//===========================================================================================================
bool PupilVisitor::end_array(){
    macro_pupil_visitor_func;
    array_value = false;
    return true;
}

//===========================================================================================================
//   ######  ########    ###    ########  ########    ##     ##    ###    ########
//  ##    ##    ##      ## ##   ##     ##    ##       ###   ###   ## ##   ##     ##
//  ##          ##     ##   ##  ##     ##    ##       #### ####  ##   ##  ##     ##
//   ######     ##    ##     ## ########     ##       ## ### ## ##     ## ########
//        ##    ##    ######### ##   ##      ##       ##     ## ######### ##
//  ##    ##    ##    ##     ## ##    ##     ##       ##     ## ##     ## ##
//   ######     ##    ##     ## ##     ##    ##       ##     ## ##     ## ##
//===========================================================================================================
bool PupilVisitor::start_map(uint32_t num_kv_pairs){
    macro_pupil_visitor_func;
    return true;
}

//===========================================================================================================
//   ######  ########    ###    ########  ########    ##    ## ######## ##    ##
//  ##    ##    ##      ## ##   ##     ##    ##       ##   ##  ##        ##  ##
//  ##          ##     ##   ##  ##     ##    ##       ##  ##   ##         ####
//   ######     ##    ##     ## ########     ##       #####    ######      ##
//        ##    ##    ######### ##   ##      ##       ##  ##   ##          ##
//  ##    ##    ##    ##     ## ##    ##     ##       ##   ##  ##          ##
//   ######     ##    ##     ## ##     ##    ##       ##    ## ########    ##
//===========================================================================================================
bool PupilVisitor::start_map_key(){
    macro_pupil_visitor_func;
    map_key = true;
    return true;
}

//===========================================================================================================
//  ######## ##    ## ########     ##    ## ######## ##    ##
//  ##       ###   ## ##     ##    ##   ##  ##        ##  ##
//  ##       ####  ## ##     ##    ##  ##   ##         ####
//  ######   ## ## ## ##     ##    #####    ######      ##
//  ##       ##  #### ##     ##    ##  ##   ##          ##
//  ##       ##   ### ##     ##    ##   ##  ##          ##
//  ######## ##    ## ########     ##    ## ########    ##
//===========================================================================================================
bool PupilVisitor::end_map_key(){
    macro_pupil_visitor_func;
    map_key = false;
    return true;
}

//===========================================================================================================
//   ######  ########    ###    ########  ########    ##     ##    ###    ##       ##     ## ########
//  ##    ##    ##      ## ##   ##     ##    ##       ##     ##   ## ##   ##       ##     ## ##
//  ##          ##     ##   ##  ##     ##    ##       ##     ##  ##   ##  ##       ##     ## ##
//   ######     ##    ##     ## ########     ##       ##     ## ##     ## ##       ##     ## ######
//        ##    ##    ######### ##   ##      ##        ##   ##  ######### ##       ##     ## ##
//  ##    ##    ##    ##     ## ##    ##     ##         ## ##   ##     ## ##       ##     ## ##
//   ######     ##    ##     ## ##     ##    ##          ###    ##     ## ########  #######  ########
//===========================================================================================================
bool PupilVisitor::start_map_value(){
    macro_pupil_visitor_func;
    return true;
}

//===========================================================================================================
//  ######## ##    ## ########     ##     ##    ###    ##       ##     ## ########
//  ##       ###   ## ##     ##    ##     ##   ## ##   ##       ##     ## ##
//  ##       ####  ## ##     ##    ##     ##  ##   ##  ##       ##     ## ##
//  ######   ## ## ## ##     ##    ##     ## ##     ## ##       ##     ## ######
//  ##       ##  #### ##     ##     ##   ##  ######### ##       ##     ## ##
//  ##       ##   ### ##     ##      ## ##   ##     ## ##       ##     ## ##
//  ######## ##    ## ########        ###    ##     ## ########  #######  ########
//===========================================================================================================
bool PupilVisitor::end_map_value(){
    macro_pupil_visitor_func;
    hashed_keys.pop_back();
    return true;
}

//===========================================================================================================
//  ######## ##    ## ########     ##     ##    ###    ########
//  ##       ###   ## ##     ##    ###   ###   ## ##   ##     ##
//  ##       ####  ## ##     ##    #### ####  ##   ##  ##     ##
//  ######   ## ## ## ##     ##    ## ### ## ##     ## ########
//  ##       ##  #### ##     ##    ##     ## ######### ##
//  ##       ##   ### ##     ##    ##     ## ##     ## ##
//  ######## ##    ## ########     ##     ## ##     ## ##
//===========================================================================================================
bool PupilVisitor::end_map(){
    macro_pupil_visitor_func;
    return true;
}

//===========================================================================================================
//  ########     ###    ########   ######  ########    ######## ########  ########   #######  ########
//  ##     ##   ## ##   ##     ## ##    ## ##          ##       ##     ## ##     ## ##     ## ##     ##
//  ##     ##  ##   ##  ##     ## ##       ##          ##       ##     ## ##     ## ##     ## ##     ##
//  ########  ##     ## ########   ######  ######      ######   ########  ########  ##     ## ########
//  ##        ######### ##   ##         ## ##          ##       ##   ##   ##   ##   ##     ## ##   ##
//  ##        ##     ## ##    ##  ##    ## ##          ##       ##    ##  ##    ##  ##     ## ##    ##
//  ##        ##     ## ##     ##  ######  ########    ######## ##     ## ##     ##  #######  ##     ##
//===========================================================================================================
void PupilVisitor::parse_error(size_t parsed_offset, size_t error_offset){
    macro_pupil_visitor_func;
}

//===========================================================================================================
//  #### ##    ##  ######  ##     ## ########    ########  ##    ## ######## ########  ######
//   ##  ###   ## ##    ## ##     ## ##          ##     ##  ##  ##     ##    ##       ##    ##
//   ##  ####  ## ##       ##     ## ##          ##     ##   ####      ##    ##       ##
//   ##  ## ## ##  ######  ##     ## ######      ########     ##       ##    ######    ######
//   ##  ##  ####       ## ##     ## ##          ##     ##    ##       ##    ##             ##
//   ##  ##   ### ##    ## ##     ## ##          ##     ##    ##       ##    ##       ##    ##
//  #### ##    ##  ######   #######  ##          ########     ##       ##    ########  ######
//===========================================================================================================
void PupilVisitor::insufficient_bytes(size_t parsed_offset, size_t error_offset){
    #ifdef PUPIL_VISITOR_DEBUG
    std::cout << "PupilVisitor::" << __func__ << std::endl;
    #endif/*PUPIL_VISITOR_DEBUG*/
}

//===========================================================================================================
//  ########  ######## ######## ######## ########  ######## ##    ##  ######  ######## ########
//  ##     ## ##       ##       ##       ##     ## ##       ###   ## ##    ## ##       ##     ##
//  ##     ## ##       ##       ##       ##     ## ##       ####  ## ##       ##       ##     ##
//  ########  ######   ######   ######   ########  ######   ## ## ## ##       ######   ##     ##
//  ##   ##   ##       ##       ##       ##   ##   ##       ##  #### ##       ##       ##     ##
//  ##    ##  ##       ##       ##       ##    ##  ##       ##   ### ##    ## ##       ##     ##
//  ##     ## ######## ##       ######## ##     ## ######## ##    ##  ######  ######## ########
//===========================================================================================================
bool PupilVisitor::referenced() const{
    return true;
}
